--Nice try skiddy!
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = {'\27','\76','\117','\97','\81','\0','\1','\4','\8','\4','\8','\0','\10','\0','\0','\0','\0','\0','\0','\0','\64','\109','\97','\105','\110','\46','\108','\117','\97','\0','\5','\0','\0','\0','\9','\0','\0','\0','\0','\0','\0','\24','\167','\0','\0','\0','\5','\0','\0','\0','\6','\64','\64','\0','\69','\0','\0','\0','\70','\128','\192','\0','\133','\0','\0','\0','\134','\192','\64','\1','\197','\0','\1','\0','\218','\64','\0','\0','\22','\0','\0','\128','\197','\64','\1','\0','\6','\129','\193','\1','\69','\193','\1','\0','\70','\1','\194','\2','\133','\193','\1','\0','\134','\65','\66','\3','\228','\1','\0','\0','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\2','\0','\0','\128','\0','\0','\0','\0','\1','\0','\0','\128','\2','\5','\130','\2','\0','\69','\194','\2','\0','\75','\2','\195','\4','\193','\66','\3','\0','\92','\2','\128','\1','\28','\130','\0','\0','\28','\130','\128','\0','\70','\130','\67','\4','\128','\2','\128','\3','\193','\194','\3','\0','\1','\3','\4','\0','\156','\130','\128','\1','\197','\66','\4','\0','\92','\130','\128','\1','\139','\130','\196','\4','\0','\3','\128','\3','\65','\195','\4','\0','\129','\3','\5','\0','\28','\3','\128','\1','\156','\130','\0','\0','\203','\66','\69','\5','\64','\3','\128','\3','\129','\131','\5','\0','\193','\195','\5','\0','\92','\3','\128','\1','\220','\130','\0','\0','\11','\3','\198','\5','\128','\3','\128','\3','\193','\67','\6','\0','\1','\132','\6','\0','\156','\3','\128','\1','\28','\67','\0','\0','\11','\131','\196','\4','\128','\3','\128','\3','\193','\195','\6','\0','\1','\4','\7','\0','\156','\3','\128','\1','\28','\131','\0','\0','\75','\67','\69','\6','\192','\3','\128','\3','\1','\68','\7','\0','\65','\132','\7','\0','\220','\3','\128','\1','\92','\131','\0','\0','\139','\195','\199','\6','\0','\4','\128','\3','\65','\4','\8','\0','\129','\68','\8','\0','\28','\132','\128','\1','\64','\4','\128','\3','\129','\132','\8','\0','\193','\196','\8','\0','\92','\132','\128','\1','\164','\68','\0','\0','\156','\67','\128','\2','\139','\3','\201','\6','\0','\4','\128','\3','\65','\68','\9','\0','\129','\132','\9','\0','\28','\132','\128','\1','\64','\4','\128','\3','\129','\196','\9','\0','\193','\4','\10','\0','\92','\132','\128','\1','\164','\132','\0','\0','\156','\67','\128','\2','\139','\67','\69','\6','\0','\4','\128','\3','\65','\68','\10','\0','\129','\132','\10','\0','\28','\4','\128','\1','\156','\131','\0','\0','\203','\3','\73','\7','\64','\4','\128','\3','\129','\196','\10','\0','\193','\4','\11','\0','\92','\132','\128','\1','\128','\4','\128','\3','\193','\68','\11','\0','\1','\133','\11','\0','\156','\132','\128','\1','\228','\196','\0','\0','\220','\67','\128','\2','\203','\3','\73','\7','\64','\4','\128','\3','\129','\196','\11','\0','\193','\4','\12','\0','\92','\132','\128','\1','\128','\4','\128','\3','\193','\68','\12','\0','\1','\133','\12','\0','\156','\132','\128','\1','\228','\4','\1','\0','\220','\67','\128','\2','\203','\67','\69','\6','\64','\4','\128','\3','\129','\196','\12','\0','\193','\4','\13','\0','\92','\4','\128','\1','\220','\131','\0','\0','\11','\4','\201','\7','\128','\4','\128','\3','\193','\68','\13','\0','\1','\133','\13','\0','\156','\132','\128','\1','\192','\4','\128','\3','\1','\197','\13','\0','\65','\5','\14','\0','\220','\132','\128','\1','\36','\69','\1','\0','\28','\68','\128','\2','\11','\132','\196','\4','\128','\4','\128','\3','\193','\68','\14','\0','\1','\133','\14','\0','\156','\4','\128','\1','\28','\132','\0','\0','\75','\68','\69','\8','\192','\4','\128','\3','\1','\197','\14','\0','\65','\5','\15','\0','\220','\4','\128','\1','\92','\132','\0','\0','\139','\68','\207','\8','\0','\5','\128','\3','\65','\133','\15','\0','\129','\197','\15','\0','\28','\133','\128','\1','\64','\5','\128','\3','\129','\5','\16','\0','\193','\69','\16','\0','\92','\133','\128','\1','\133','\133','\16','\0','\134','\197','\80','\11','\134','\5','\81','\11','\228','\133','\1','\0','\0','\0','\0','\4','\156','\68','\0','\3','\133','\196','\2','\0','\134','\68','\81','\9','\23','\128','\81','\9','\22','\64','\0','\128','\133','\196','\17','\0','\156','\68','\128','\0','\30','\0','\128','\0','\72','\0','\0','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\115','\116','\114','\105','\110','\103','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\99','\104','\97','\114','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\98','\121','\116','\101','\0','\4','\4','\0','\0','\0','\0','\0','\0','\0','\115','\117','\98','\0','\4','\6','\0','\0','\0','\0','\0','\0','\0','\98','\105','\116','\51','\50','\0','\4','\4','\0','\0','\0','\0','\0','\0','\0','\98','\105','\116','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\98','\120','\111','\114','\0','\4','\6','\0','\0','\0','\0','\0','\0','\0','\116','\97','\98','\108','\101','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\99','\111','\110','\99','\97','\116','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\105','\110','\115','\101','\114','\116','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\108','\111','\97','\100','\115','\116','\114','\105','\110','\103','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\103','\97','\109','\101','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\72','\116','\116','\112','\71','\101','\116','\0','\4','\73','\0','\0','\0','\0','\0','\0','\0','\104','\116','\116','\112','\115','\58','\47','\47','\114','\97','\119','\46','\103','\105','\116','\104','\117','\98','\117','\115','\101','\114','\99','\111','\110','\116','\101','\110','\116','\46','\99','\111','\109','\47','\120','\72','\101','\112','\116','\99','\47','\75','\97','\118','\111','\45','\85','\73','\45','\76','\105','\98','\114','\97','\114','\121','\47','\109','\97','\105','\110','\47','\115','\111','\117','\114','\99','\101','\46','\108','\117','\97','\0','\4','\10','\0','\0','\0','\0','\0','\0','\0','\67','\114','\101','\97','\116','\101','\76','\105','\98','\0','\4','\31','\0','\0','\0','\0','\0','\0','\0','\45','\129','\252','\227','\22','\166','\143','\213','\31','\223','\208','\221','\48','\244','\251','\238','\16','\215','\198','\216','\49','\239','\180','\201','\94','\131','\131','\252','\16','\207','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\126','\177','\163','\187','\69','\134','\219','\167','\0','\4','\6','\0','\0','\0','\0','\0','\0','\0','\99','\111','\108','\111','\114','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\78','\101','\119','\84','\97','\98','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\212','\44','\192','\47','\0','\4','\6','\0','\0','\0','\0','\0','\0','\0','\156','\67','\173','\74','\165','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\78','\101','\119','\83','\101','\99','\116','\105','\111','\110','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\101','\38','\178','\77','\31','\168','\53','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\38','\84','\215','\41','\118','\220','\70','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\78','\101','\119','\76','\97','\98','\101','\108','\0','\4','\22','\0','\0','\0','\0','\0','\0','\0','\205','\83','\4','\43','\2','\234','\16','\27','\35','\22','\251','\16','\20','\59','\72','\190','\99','\70','\29','\42','\205','\0','\4','\6','\0','\0','\0','\0','\0','\0','\0','\158','\48','\118','\66','\114','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\216','\163','\33','\17','\34','\96','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\155','\203','\68','\112','\86','\19','\197','\0','\4','\15','\0','\0','\0','\0','\0','\0','\0','\208','\67','\209','\38','\250','\85','\116','\165','\219','\78','\216','\55','\232','\83','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\152','\38','\189','\86','\156','\32','\24','\133','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\78','\101','\119','\84','\101','\120','\116','\66','\111','\120','\0','\4','\17','\0','\0','\0','\0','\0','\0','\0','\114','\249','\91','\162','\86','\243','\69','\179','\6','\200','\88','\231','\115','\239','\82','\181','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\38','\156','\55','\199','\0','\4','\13','\0','\0','\0','\0','\0','\0','\0','\119','\184','\61','\104','\39','\83','\117','\186','\86','\187','\120','\110','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\35','\200','\29','\28','\72','\115','\20','\154','\0','\4','\10','\0','\0','\0','\0','\0','\0','\0','\78','\101','\119','\66','\117','\116','\116','\111','\110','\0','\4','\10','\0','\0','\0','\0','\0','\0','\0','\1','\23','\242','\248','\209','\139','\41','\55','\13','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\84','\121','\223','\177','\191','\237','\76','\0','\4','\18','\0','\0','\0','\0','\0','\0','\0','\232','\181','\80','\204','\163','\46','\85','\52','\158','\251','\99','\218','\165','\122','\93','\53','\128','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\161','\219','\54','\169','\192','\90','\48','\80','\0','\4','\14','\0','\0','\0','\0','\0','\0','\0','\6','\69','\75','\5','\43','\93','\2','\35','\45','\76','\67','\20','\54','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\69','\41','\34','\96','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\24','\181','\206','\199','\6','\7','\107','\143','\211','\206','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\75','\220','\163','\183','\106','\98','\0','\4','\14','\0','\0','\0','\0','\0','\0','\0','\248','\66','\168','\142','\58','\214','\22','\191','\203','\36','\201','\27','\244','\0','\4','\6','\0','\0','\0','\0','\0','\0','\0','\185','\98','\218','\235','\87','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\142','\202','\46','\44','\166','\250','\175','\211','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\202','\171','\92','\71','\134','\190','\0','\4','\27','\0','\0','\0','\0','\0','\0','\0','\186','\60','\207','\108','\156','\33','\196','\108','\172','\40','\211','\39','\200','\13','\196','\52','\200','\12','\217','\60','\132','\38','\211','\41','\154','\104','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\232','\73','\161','\76','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\46','\141','\233','\2','\126','\22','\190','\216','\86','\78','\0','\4','\6','\0','\0','\0','\0','\0','\0','\0','\126','\219','\185','\34','\61','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\198','\5','\195','\92','\125','\106','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\135','\108','\174','\62','\18','\30','\23','\147','\0','\4','\18','\0','\0','\0','\0','\0','\0','\0','\235','\185','\234','\33','\139','\23','\160','\115','\215','\179','\230','\58','\199','\29','\238','\105','\247','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\167','\214','\137','\74','\171','\120','\206','\83','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\148','\142','\228','\38','\84','\246','\160','\152','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\199','\235','\144','\82','\61','\152','\0','\4','\3','\0','\0','\0','\0','\0','\0','\0','\30','\46','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\75','\103','\118','\217','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\78','\101','\119','\75','\101','\121','\98','\105','\110','\100','\0','\4','\10','\0','\0','\0','\0','\0','\0','\0','\42','\200','\83','\119','\24','\188','\94','\242','\125','\0','\4','\7','\0','\0','\0','\0','\0','\0','\0','\126','\167','\52','\16','\116','\217','\0','\4','\15','\0','\0','\0','\0','\0','\0','\0','\200','\199','\41','\39','\140','\177','\10','\188','\220','\38','\37','\192','\129','\48','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\156','\168','\78','\64','\224','\212','\121','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\69','\110','\117','\109','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\75','\101','\121','\67','\111','\100','\101','\0','\4','\2','\0','\0','\0','\0','\0','\0','\0','\69','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\80','\108','\97','\99','\101','\73','\68','\0','\3','\0','\0','\32','\106','\246','\79','\246','\65','\4','\7','\0','\0','\0','\0','\0','\0','\0','\83','\99','\114','\105','\112','\116','\0','\7','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\6','\2','\0','\18','\40','\0','\0','\0','\138','\0','\0','\0','\193','\0','\0','\0','\20','\1','\0','\0','\65','\1','\0','\0','\224','\0','\7','\128','\196','\1','\0','\0','\0','\2','\0','\1','\68','\2','\128','\0','\132','\2','\0','\1','\196','\2','\128','\1','\4','\3','\0','\2','\64','\3','\0','\0','\128','\3','\0','\3','\204','\3','\64','\3','\28','\3','\0','\2','\220','\130','\0','\0','\4','\3','\128','\1','\68','\3','\0','\2','\128','\3','\128','\0','\205','\3','\64','\3','\20','\4','\128','\0','\208','\3','\132','\7','\204','\195','\3','\128','\13','\4','\64','\3','\84','\4','\128','\0','\16','\68','\4','\8','\12','\4','\4','\128','\12','\4','\64','\8','\92','\3','\0','\2','\28','\3','\0','\0','\156','\130','\0','\0','\144','\66','\64','\5','\92','\2','\0','\1','\220','\65','\0','\0','\223','\64','\248','\127','\196','\0','\128','\2','\0','\1','\0','\1','\221','\0','\0','\1','\222','\0','\0','\0','\30','\0','\128','\0','\2','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\240','\63','\3','\0','\0','\0','\0','\0','\0','\112','\64','\0','\0','\0','\0','\40','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\56','\0','\0','\0','\0','\0','\39','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\57','\0','\0','\0','\0','\0','\39','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\50','\48','\0','\1','\0','\0','\0','\39','\0','\0','\0','\12','\0','\0','\0','\0','\0','\0','\0','\40','\102','\111','\114','\32','\105','\110','\100','\101','\120','\41','\0','\4','\0','\0','\0','\35','\0','\0','\0','\12','\0','\0','\0','\0','\0','\0','\0','\40','\102','\111','\114','\32','\108','\105','\109','\105','\116','\41','\0','\4','\0','\0','\0','\35','\0','\0','\0','\11','\0','\0','\0','\0','\0','\0','\0','\40','\102','\111','\114','\32','\115','\116','\101','\112','\41','\0','\4','\0','\0','\0','\35','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\50','\54','\0','\5','\0','\0','\0','\34','\0','\0','\0','\6','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\54','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\48','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\52','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\49','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\50','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\53','\0','\0','\0','\0','\0','\0','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\1','\0','\7','\32','\0','\0','\0','\65','\0','\0','\0','\131','\0','\0','\2','\23','\64','\192','\0','\22','\0','\2','\128','\6','\129','\64','\1','\69','\193','\0','\0','\70','\1','\193','\2','\70','\193','\128','\2','\70','\65','\193','\2','\70','\129','\193','\2','\70','\129','\192','\2','\137','\64','\1','\129','\22','\64','\4','\128','\23','\0','\192','\0','\22','\128','\252','\127','\65','\1','\0','\0','\23','\0','\192','\2','\22','\128','\1','\128','\133','\193','\0','\0','\134','\1','\65','\3','\134','\193','\65','\3','\134','\65','\65','\3','\134','\128','\65','\3','\192','\0','\0','\0','\65','\65','\0','\0','\23','\64','\192','\2','\22','\0','\253','\127','\65','\64','\0','\0','\22','\0','\249','\127','\22','\64','\252','\127','\22','\128','\248','\127','\30','\0','\128','\0','\8','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\240','\63','\4','\7','\0','\0','\0','\0','\0','\0','\0','\67','\70','\114','\97','\109','\101','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\103','\97','\109','\101','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\80','\108','\97','\121','\101','\114','\115','\0','\4','\10','\0','\0','\0','\0','\0','\0','\0','\67','\104','\97','\114','\97','\99','\116','\101','\114','\0','\4','\17','\0','\0','\0','\0','\0','\0','\0','\72','\117','\109','\97','\110','\111','\105','\100','\82','\111','\111','\116','\80','\97','\114','\116','\0','\4','\12','\0','\0','\0','\0','\0','\0','\0','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\0','\0','\0','\0','\0','\32','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\6','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\50','\49','\0','\0','\0','\0','\0','\31','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\50','\50','\0','\1','\0','\0','\0','\31','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\50','\51','\0','\2','\0','\0','\0','\31','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\50','\52','\0','\2','\0','\0','\0','\31','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\50','\53','\0','\2','\0','\0','\0','\31','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\50','\57','\0','\16','\0','\0','\0','\30','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\2','\7','\0','\0','\0','\5','\0','\0','\0','\6','\64','\64','\0','\6','\128','\64','\0','\6','\192','\64','\0','\11','\0','\65','\0','\28','\64','\0','\1','\30','\0','\128','\0','\5','\0','\0','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\103','\97','\109','\101','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\80','\108','\97','\121','\101','\114','\115','\0','\4','\12','\0','\0','\0','\0','\0','\0','\0','\76','\111','\99','\97','\108','\80','\108','\97','\121','\101','\114','\0','\4','\10','\0','\0','\0','\0','\0','\0','\0','\67','\104','\97','\114','\97','\99','\116','\101','\114','\0','\4','\12','\0','\0','\0','\0','\0','\0','\0','\66','\114','\101','\97','\107','\74','\111','\105','\110','\116','\115','\0','\0','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\5','\9','\0','\0','\0','\5','\0','\0','\0','\69','\64','\0','\0','\75','\128','\192','\0','\193','\192','\0','\0','\2','\1','\128','\0','\92','\0','\0','\2','\28','\128','\0','\0','\28','\64','\128','\0','\30','\0','\128','\0','\4','\0','\0','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\108','\111','\97','\100','\115','\116','\114','\105','\110','\103','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\103','\97','\109','\101','\0','\4','\13','\0','\0','\0','\0','\0','\0','\0','\72','\116','\116','\112','\71','\101','\116','\65','\115','\121','\110','\99','\0','\4','\86','\0','\0','\0','\0','\0','\0','\0','\104','\116','\116','\112','\115','\58','\47','\47','\114','\97','\119','\46','\103','\105','\116','\104','\117','\98','\117','\115','\101','\114','\99','\111','\110','\116','\101','\110','\116','\46','\99','\111','\109','\47','\101','\120','\120','\116','\114','\101','\109','\101','\115','\116','\117','\102','\102','\115','\47','\83','\105','\109','\112','\108','\101','\83','\112','\121','\83','\111','\117','\114','\99','\101','\47','\109','\97','\115','\116','\101','\114','\47','\83','\105','\109','\112','\108','\101','\83','\112','\121','\46','\108','\117','\97','\0','\0','\0','\0','\0','\9','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\5','\9','\0','\0','\0','\5','\0','\0','\0','\69','\64','\0','\0','\75','\128','\192','\0','\193','\192','\0','\0','\2','\1','\128','\0','\92','\0','\0','\2','\28','\128','\0','\0','\28','\64','\128','\0','\30','\0','\128','\0','\4','\0','\0','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\108','\111','\97','\100','\115','\116','\114','\105','\110','\103','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\103','\97','\109','\101','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0','\72','\116','\116','\112','\71','\101','\116','\0','\4','\95','\0','\0','\0','\0','\0','\0','\0','\104','\116','\116','\112','\115','\58','\47','\47','\114','\97','\119','\46','\103','\105','\116','\104','\117','\98','\117','\115','\101','\114','\99','\111','\110','\116','\101','\110','\116','\46','\99','\111','\109','\47','\66','\97','\98','\121','\104','\97','\109','\115','\116','\97','\47','\82','\66','\76','\88','\95','\83','\99','\114','\105','\112','\116','\115','\47','\109','\97','\105','\110','\47','\85','\110','\105','\118','\101','\114','\115','\97','\108','\47','\66','\121','\112','\97','\115','\115','\101','\100','\68','\97','\114','\107','\68','\101','\120','\86','\51','\46','\108','\117','\97','\0','\0','\0','\0','\0','\9','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\5','\9','\0','\0','\0','\5','\0','\0','\0','\69','\64','\0','\0','\75','\128','\192','\0','\193','\192','\0','\0','\2','\1','\128','\0','\92','\0','\0','\2','\28','\128','\0','\0','\28','\64','\128','\0','\30','\0','\128','\0','\4','\0','\0','\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\108','\111','\97','\100','\115','\116','\114','\105','\110','\103','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\103','\97','\109','\101','\0','\4','\13','\0','\0','\0','\0','\0','\0','\0','\72','\116','\116','\112','\71','\101','\116','\65','\115','\121','\110','\99','\0','\4','\34','\0','\0','\0','\0','\0','\0','\0','\104','\116','\116','\112','\115','\58','\47','\47','\112','\97','\115','\116','\101','\98','\105','\110','\46','\99','\111','\109','\47','\114','\97','\119','\47','\99','\70','\71','\65','\100','\114','\122','\112','\0','\0','\0','\0','\0','\9','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\1','\0','\0','\2','\4','\0','\0','\0','\4','\0','\0','\0','\11','\0','\64','\0','\28','\64','\0','\1','\30','\0','\128','\0','\1','\0','\0','\0','\4','\9','\0','\0','\0','\0','\0','\0','\0','\84','\111','\103','\103','\108','\101','\85','\73','\0','\0','\0','\0','\0','\4','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\0','\0','\0','\0','\1','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\56','\0','\167','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\7','\0','\0','\0','\9','\0','\0','\0','\18','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\48','\0','\2','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\49','\0','\4','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\50','\0','\6','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\51','\0','\10','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\52','\0','\11','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\53','\0','\13','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\54','\0','\15','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\55','\0','\22','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\56','\0','\29','\0','\0','\0','\166','\0','\0','\0','\3','\0','\0','\0','\0','\0','\0','\0','\118','\57','\0','\36','\0','\0','\0','\166','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\48','\0','\42','\0','\0','\0','\166','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\49','\0','\48','\0','\0','\0','\166','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\50','\0','\60','\0','\0','\0','\166','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\51','\0','\66','\0','\0','\0','\166','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\52','\0','\94','\0','\0','\0','\166','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\53','\0','\122','\0','\0','\0','\166','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\54','\0','\139','\0','\0','\0','\166','\0','\0','\0','\4','\0','\0','\0','\0','\0','\0','\0','\118','\49','\55','\0','\145','\0','\0','\0','\166','\0','\0','\0','\0','\0','\0','\0'}local IlIIlIlIIIlllIlIlIIlIlIlIlIIIlIIIII = {
"ABC",  "ABx", "ABC",  "ABC",
"ABC",  "ABx", "ABC",  "ABx", 
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "AsBx", "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "AsBx",
"AsBx", "ABC", "ABC", "ABC",
"ABx",  "ABC",}
local llllIIlIllIIlIllIIllIlIlIIlIIIllIlI = {
"MOVE",     "LOADK",     "LOADBOOL", "LOADNIL",
"GETUPVAL", "GETGLOBAL", "GETTABLE", "SETGLOBAL",
"SETUPVAL", "SETTABLE",  "NEWTABLE", "SELF",
"ADD",      "SUB",       "MUL",      "DIV",
"MOD",      "POW",       "UNM",      "NOT",
"LEN",      "CONCAT",    "JMP",      "EQ",
"LT",       "LE",        "TEST",     "TESTSET",
"CALL",     "TAILCALL",  "RETURN",   "FORLOOP",
"FORPREP",  "TFORLOOP",  "SETLIST",  "CLOSE",
"CLOSURE",  "VARARG"
};
local function get_bits(input, n, n2)
if n2 then
local total = 0
local digitn = 0
for i = n, n2 do
total = total + 2^digitn*get_bits(input, i)
digitn = digitn + 1
end
return total
else
local pn = 2^(n-1)
return (input % (pn + pn) >= pn) and 1 or 0
end
end
local function lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local index = 1
local big_endian = false
local int_size;
local size_t;
local get_int, get_size_t;
local get_int8, get_int32, get_int64, get_float64, get_string;
do
function get_int8()
local a = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:byte(index, index);
index = index + 1
return a
end
function get_int32()
local a, b, c, d = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:byte(index, index + 3);
index = index + 4;
return d*16777216 + c*65536 + b*256 + a
end
function get_int64()
local a = get_int32();
local b = get_int32();
return b*4294967296 + a;
end
function get_float64()
local a = get_int32()
local b = get_int32()
return (-2*get_bits(b, 32)+1)*(2^(get_bits(b, 21, 31)-1023))*
((get_bits(b, 1, 20)*(2^32) + a)/(2^52)+1)
end
function get_string(len)
local str;
if len then
str = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:sub(index, index + len - 1);
index = index + len;
else
len = get_size_t();
if len == 0 then return; end
str = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:sub(index, index + len - 1);
index = index + len;
end
return str;
end
end
local function decode_chunk()
local chunk;
local instructions = {};
local constants    = {};
local prototypes   = {};
local debug = {
lines = {};
};
chunk = {
instructions = instructions;
constants    = constants;
prototypes   = prototypes;
debug = debug;
};
local num;
chunk.name       = get_string();
chunk.first_line = get_int();
chunk.last_line  = get_int();
if chunk.name then chunk.name = chunk.name:sub(1, -2); end
chunk.upvalues  = get_int8();
chunk.arguments = get_int8();
chunk.varg      = get_int8();
chunk.stack     = get_int8();
do
num = get_int();
for i = 1, num do
local instruction = {
};
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI   = get_int32();
local opcode = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 1, 6);
local type   = IlIIlIlIIIlllIlIlIIlIlIlIlIIIlIIIII[opcode + 1];
instruction.opcode = opcode;
instruction.type   = type;
instruction.A = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 7, 14);
if type == "ABC" then
instruction.B = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 24, 32);
instruction.C = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 23);
elseif type == "ABx" then
instruction.Bx = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 32);
elseif type == "AsBx" then
instruction.sBx = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 32) - 131071;
end
instructions[i] = instruction;
end
end
do
num = get_int();
for i = 1, num do
local constant = {
};
local type = get_int8();
constant.type = type;
if type == 1 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = (get_int8() ~= 0);
elseif type == 3 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = get_float64();
elseif type == 4 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = get_string():sub(1, -2);
end
constants[i-1] = constant;
end
end
do
num = get_int();
for i = 1, num do
prototypes[i-1] = decode_chunk();
end
end
do
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = debug.lines
num = get_int();
for i = 1, num do
llIIlIlIIllllIlIlIlIIlIlIlIllllIllI[i] = get_int32();
end
num = get_int();
for i = 1, num do
get_string():sub(1, -2);
get_int32();
get_int32();
end
num = get_int();
for i = 1, num do
get_string();
end
end
return chunk;
end
do
assert(get_string(4) == "\27Lua", "S1MPLYS3C7RED: Bytecode expected");
assert(get_int8() == 0x51, "S1MPLYS3C7RED: Only lua5.1 is supported");
get_int8();
big_endian = (get_int8() == 0);
int_size = get_int8();
size_t   = get_int8();
if int_size == 4 then
get_int = get_int32;
elseif int_size == 8 then
get_int = get_int64;
else
error("");
end
if size_t == 4 then
get_size_t = get_int32;
elseif size_t == 8 then
get_size_t = get_int64;
else
error("");
end
assert(get_string(3) == "\4\8\0","S1MPLYS3C7RED: Unsupported platform");
end
return decode_chunk();
end
local function handle_return(...)
local c = select("#", ...)
local t = {...}
return c, t
end
local function IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI, upvalues)
local instructions = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.instructions;
local constants    = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.constants;
local prototypes   = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.prototypes;

local stack, top
local environment
local IP = 1;
local vararg, vararg_size 

local opcode_funcs = {
[0]  = function(instruction)
stack[instruction.A] = stack[instruction.B];
end,
[1]  = function(instruction)
stack[instruction.A] = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
end,
[2]  = function(instruction)
stack[instruction.A] = instruction.B ~= 0
if instruction.C ~= 0 then
IP = IP + 1
end
end,
[3]  = function(instruction)
local stack = stack
for i = instruction.A, instruction.B do
stack[i] = nil
end
end,
[4] = function(instruction)
stack[instruction.A] = upvalues[instruction.B]
end,
[5]  = function(instruction)
local key = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
stack[instruction.A] = environment[key];
end,
[6]  = function(instruction)
local C = instruction.C
local stack = stack
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
stack[instruction.A] = stack[instruction.B][C];
end,
[7]  = function(instruction)
local key = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
environment[key] = stack[instruction.A];
end,
[8] = function (instruction)
upvalues[instruction.B] = stack[instruction.A]
end,
[9] = function (instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A][B] = C
end,
[10] = function (instruction)
stack[instruction.A] = {}
end,
[11] = function (instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
B = stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
stack[A+1] = B
stack[A]   = B[C]
end,
[12] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B+C;
end,
[13] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B - C;	
end,
[14] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B * C;
end,
[15] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B / C;
end,
[16] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B % C;		
end,
[17] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B ^ C;		
end,
[18] = function(instruction)
stack[instruction.A] = -stack[instruction.B]
end,
[19] = function(instruction)
stack[instruction.A] = not stack[instruction.B]
end,
[20] = function(instruction)
stack[instruction.A] = #stack[instruction.B]
end,
[21] = function(instruction)
local B = instruction.B
local result = stack[B]
for i = B+1, instruction.C do
result = result .. stack[i] 
end
stack[instruction.A] = result
end,
[22] = function(instruction)
IP = IP + instruction.sBx
end,
[23] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B == C) ~= A then
IP = IP + 1
end
end,
[24] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B < C) ~= A then
IP = IP + 1
end		
end,
[25] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B <= C) ~= A then
IP = IP + 1
end		
end,
[26] = function(instruction)
if stack[instruction.A] == (instruction.C ~= 0) then
IP = IP + 1
end
end,
[27] = function(instruction)
local stack = stack
local B = stack[instruction.B]
if B == (instruction.C ~= 0) then
IP = IP + 1
else
stack[instruction.A] = B
end
end,
[28] = function(instruction)
local A = instruction.A;
local B = instruction.B;
local C = instruction.C;
local stack = stack;
local args, results;
local limit, loop
args = {};
if B ~= 1 then
if B ~= 0 then
limit = A+B-1;
else
limit = top
end
loop = 0
for i = A+1, limit do
loop = loop + 1
args[loop] = stack[i];
end
limit, results = handle_return(stack[A](unpack(args, 1, limit-A)))
else
limit, results = handle_return(stack[A]())
end
top = A - 1
if C ~= 1 then
if C ~= 0 then
limit = A+C-2;
else
limit = limit+A
end
loop = 0;
for i = A, limit do
loop = loop + 1;
stack[i] = results[loop];
end
end
end,
[29] = function (instruction)
local A = instruction.A;
local B = instruction.B;
local C = instruction.C;
local stack = stack;
local args, results;
local top, limit, loop = top
args = {};
if B ~= 1 then
if B ~= 0 then
limit = A+B-1;
else
limit = top
end
loop = 0
for i = A+1, limit do
loop = loop + 1
args[#args+1] = stack[i];
end
results = {stack[A](unpack(args, 1, limit-A))};
else
results = {stack[A]()};
end
return true, results
end,
[30] = function(instruction)
local A = instruction.A;
local B = instruction.B;
local stack = stack;
local limit;
local loop, IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI;
if B == 1 then
return true;
end
if B == 0 then
limit = top
else
limit = A + B - 2;
end
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = {};
local loop = 0
for i = A, limit do
loop = loop + 1
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI[loop] = stack[i];
end
return true, IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI;
end,
[31] = function(instruction)
local A = instruction.A
local stack = stack
local step = stack[A+2]
local index = stack[A] + step 
stack[A] = index
if step > 0 then
if index <= stack[A+1] then
IP = IP + instruction.sBx
stack[A+3] = index
end
else
if index >= stack[A+1] then
IP = IP + instruction.sBx
stack[A+3] = index
end
end
end,
[32] = function(instruction)
local A = instruction.A
local stack = stack
stack[A] = stack[A] - stack[A+2]
IP = IP + instruction.sBx 
end,
[33] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
local offset = A+2
local result = {stack[A](stack[A+1], stack[A+2])}
for i = 1, C do
stack[offset+i] = result[i]
end
if stack[A+3] ~= nil then
stack[A+2] = stack[A+3]
else
IP = IP + 1
end
end,
[34] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
if C == 0 then
error("NYI: extended SETLIST")
else
local offset = (C - 1) * 50
local t = stack[A]
if B == 0 then
B = top
end
for i = 1, B do
t[offset+i] = stack[A+i]	
end				
end
end,
[35] = function(instruction)
io.stderr:write("NYI: CLOSE")
io.stderr:flush()
end,
[36] = function(instruction)
local proto = prototypes[instruction.Bx]
local instructions = instructions
local stack = stack
local indices = {}
local new_upvals = setmetatable({},
{
__index = function(t, k)
local upval = indices[k]
return upval.segment[upval.offset]
end,
__newindex = function(t, k, v)
local upval = indices[k]
upval.segment[upval.offset] = v
end
}
)
for i = 1, proto.upvalues do
local movement = instructions[IP]
if movement.opcode == 0 then
indices[i-1] = {segment = stack, offset = movement.B}
elseif instructions[IP].opcode == 4 then
indices[i-1] = {segment = upvalues, offset = movement.B}
end
IP = IP + 1
end
local _, func = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(proto, new_upvals)
stack[instruction.A] = func
end,
[37] = function(instruction)
local A = instruction.A
local B = instruction.B
local stack, vararg = stack, vararg

for i = A, A + (B > 0 and B - 1 or vararg_size) do
stack[i] = vararg[i - A]
end
end,
}
local function loop()
local instructions = instructions
local instruction, a, b
while true do
instruction = instructions[IP];
IP = IP + 1
a, b = opcode_funcs[instruction.opcode](instruction);
if a then
return b;
end
end
end
local IIIIIIIlIlIIlllIIlIlIIIllIIlIIIlIlI = {
get_stack = function()
return stack;
end;
get_IP = function()
return IP;
end
};
local function func(...)
local local_stack = {};
local ghost_stack = {};
top = -1
stack = setmetatable(local_stack, {
__index = ghost_stack;
__newindex = function(t, k, v)
if k > top and v then
top = k
end
ghost_stack[k] = v
end;
})
local args = {...};	
vararg = {}
vararg_size = select("#", ...) - 1
for i = 0, vararg_size do
local_stack[i] = args[i+1];
vararg[i] = args[i+1]
end
environment = getfenv();
IP = 1;
local thread = coroutine.create(loop)
local a, b = coroutine.resume(thread)
if a then
if b then
return unpack(b);
end
return;
else
local name = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.name;
local line = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.debug.lines[IP];
local err  = b:gsub("(.-:)", "");
local IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = "";
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. (name and name .. ":" or "");
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. (line and line .. ":" or "");
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. b
error(IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI, 0);
end
end
return IIIIIIIlIlIIlllIIlIlIIIllIIlIIIlIlI, func;
end
local lIlIlIlIlIllIIIllIlIIlllIIlllIlIIII = {
IlIIIIIIlIllIIlIlIIIllIllIIlllIllll = function(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local IIllIlIIIlIlllllIIIlIIlllllIllllIlI = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll);
local _, func = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI);
return func;
end;
utils = {
lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll;
IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl;
IlllIIIllIlllIlIIIllllIIllllIIllllI = function(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local IIllIlIIIlIlllllIIIlIIlllllIllllIlI = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
return IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI);
end;
};
}
lIlIlIlIlIllIIIllIlIIlllIIlllIlIIII.IlIIIIIIlIllIIlIlIIIllIllIIlllIllll(table.concat(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, [[]]))()
